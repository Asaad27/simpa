package tools;
import java.util.Collections;
import java.util.List;
import java.util.TreeMap;

import learner.efsm.LiConjecture;
import automata.State;
import automata.efsm.EFSMTransition;
import automata.efsm.Parameter;
import drivers.efsm.EFSMDriver.Types;

public class XMLModel {
	private String name;
	private LiConjecture conj = null;
	private TreeMap<String, String> arguments, symbols, gsymbols;
	private TreeMap<Types, String> mappingSIMPAXML;
	
	public XMLModel(String name){
		this.name = name;
		arguments = new TreeMap<String, String>();
		symbols = new TreeMap<String, String>();
		gsymbols = new TreeMap<String, String>();
		mappingSIMPAXML = new TreeMap<Types, String>();
		mappingSIMPAXML.put(Types.STRING, "string");
		mappingSIMPAXML.put(Types.NUMERIC, "int");
		mappingSIMPAXML.put(Types.NOMINAL, "string");
	}
	
	public void addSymbol(String name, String type){
		symbols.put(name,  type);
	}
	
	public void addGlobalSymbol(String name, String type){
		gsymbols.put(name,  type);
	}
	
	public void addArgument(String name, String type){
		arguments.put(name,  type);
	}
	
	public String toString(){
		StringBuilder res = new StringBuilder("<?xml version=\"1.0\" encoding=\"utf-8\"?>\n");
		res.append("<nta>\n");
		res.append("    <declaration>\n");
		res.append("        /*\n");
		res.append("         * Generated by SIMPA\n");
		res.append("         */\n");
		res.append("    </declaration>\n");
		res.append("    <template>\n");
		res.append("	    <name>"+name+"</name>\n");
		
		for(State s : conj.getStates()){
			res.append("        <location id=\""+s.getName()+"\">\n");
			res.append("            <name>"+s.getName()+"</name>\n");
			res.append("        </location>\n");
		}
		
		res.append("	    <init ref=\"S0\" />\n");
		
		
		for(EFSMTransition t : conj.getTransitions()){
			res.append("        <transition>\n");
			res.append("            <source ref=\""+t.getFrom()+"\" />\n");
			res.append("            <target ref=\""+t.getTo()+"\" />\n");
			
			if (!conj.getLabelForTransition(t).getPredicates().isEmpty()){
				List<String> predicates = conj.getLabelForTransition(t).getPredicates();
				Collections.sort(predicates);
				res.append("            <label kind=\"guard\">" + Utils.joinAndClean(predicates, " | ").replace("&", "and").replace("|", "or") +"</label>\n");
			}
			
			for(Parameter p : conj.getLabelForTransition(t).getInput().getParameters()){
				symbols.put(p.value, mappingSIMPAXML.get(p.type));
			}
			
			for(String s : conj.getLabelForTransition(t).getOutputFunctions()){
				if (s.indexOf("=>") == -1){
					String[] value = s.split(" = ");
					if (value[1].startsWith("\"Ndv")) res.append("            <label kind=\"assignment\">" + value[0] + " := fresh();</label>\n");
					else{
						try{
							Float.parseFloat(value[1].substring(1, value[1].length()-1));
							res.append("            <label kind=\"assignment\">" + value[0] + " := " + value[1].substring(1, value[1].length()-1).trim() + ";</label>\n");
						}catch(NumberFormatException e){
							res.append("            <label kind=\"assignment\">" + value[0] + " := " + value[1].trim() + ";</label>\n");
							addGlobalSymbol(value[1].trim(), "text");
						}							
					}
				}else{
					String[] value1 = s.split(" => ");
					String[] value2 = value1[1].split(" = ");
					res.append("            <label kind=\"assignment\"> " + "if (" + Utils.filter(value1[0]).replace("&", "and").replace("|", "or") + "){ " + value2[0] + " := " + value2[1] + "; } </label>\n");
				}
			}
			
			List<String> paramNames = conj.getParamNames(conj.getLabelForTransition(t).getOutput().getOutputSymbol());
			String output = "";
			if (!paramNames.isEmpty()) output += Utils.capitalize(paramNames.get(0));
			for(int i=1; i<paramNames.size(); i++) output += ", " + Utils.capitalize(paramNames.get(i));
			output = conj.getLabelForTransition(t).getOutput().getOutputSymbol().toLowerCase() + "(" + output + ")";
			res.append("            <label kind=\"output\">"+ output +"</label>\n");
			
			for(Parameter p : conj.getLabelForTransition(t).getOutput().getParameters()){
				symbols.put(p.value, mappingSIMPAXML.get(p.type));
			}
			
			res.append("        </transition>\n");
		}

		for(String key : symbols.keySet()){
			res.append("        <declaration>" +symbols.get(key) + " " + Utils.capitalize(key) + ";</declaration>\n");
		}	
		
		res.append("    </template>\n");
		res.append("	<system>system " + name + ";</system>\n");
		res.append("</nta>\n");
		return res.toString();
	}

	public void loadFromEFSM(LiConjecture conjecture) {
		conjecture.cleanMark();
		conj = conjecture;
	}

}
